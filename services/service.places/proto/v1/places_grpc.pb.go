// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/v1/places.proto

package placespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Places_GetPlace_FullMethodName = "/service.places.v1.Places/GetPlace"
)

// PlacesClient is the client API for Places service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlacesClient interface {
	GetPlace(ctx context.Context, in *GetPlaceRequest, opts ...grpc.CallOption) (*GetPlaceReply, error)
}

type placesClient struct {
	cc grpc.ClientConnInterface
}

func NewPlacesClient(cc grpc.ClientConnInterface) PlacesClient {
	return &placesClient{cc}
}

func (c *placesClient) GetPlace(ctx context.Context, in *GetPlaceRequest, opts ...grpc.CallOption) (*GetPlaceReply, error) {
	out := new(GetPlaceReply)
	err := c.cc.Invoke(ctx, Places_GetPlace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlacesServer is the server API for Places service.
// All implementations must embed UnimplementedPlacesServer
// for forward compatibility
type PlacesServer interface {
	GetPlace(context.Context, *GetPlaceRequest) (*GetPlaceReply, error)
	mustEmbedUnimplementedPlacesServer()
}

// UnimplementedPlacesServer must be embedded to have forward compatible implementations.
type UnimplementedPlacesServer struct {
}

func (UnimplementedPlacesServer) GetPlace(context.Context, *GetPlaceRequest) (*GetPlaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlace not implemented")
}
func (UnimplementedPlacesServer) mustEmbedUnimplementedPlacesServer() {}

// UnsafePlacesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlacesServer will
// result in compilation errors.
type UnsafePlacesServer interface {
	mustEmbedUnimplementedPlacesServer()
}

func RegisterPlacesServer(s grpc.ServiceRegistrar, srv PlacesServer) {
	s.RegisterService(&Places_ServiceDesc, srv)
}

func _Places_GetPlace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlacesServer).GetPlace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Places_GetPlace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlacesServer).GetPlace(ctx, req.(*GetPlaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Places_ServiceDesc is the grpc.ServiceDesc for Places service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Places_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.places.v1.Places",
	HandlerType: (*PlacesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlace",
			Handler:    _Places_GetPlace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/places.proto",
}
